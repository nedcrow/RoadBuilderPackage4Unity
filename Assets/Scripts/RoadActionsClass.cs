//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/RoadSystem/RoadActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/RoadSystem/RoadActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @RoadActionsClass: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @RoadActionsClass()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""RoadActions"",
    ""maps"": [
        {
            ""name"": ""RoadActions"",
            ""id"": ""f73d2616-ffbe-4bc2-8f38-d344f9a815e9"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""02894c25-0943-478b-bc82-95bc09e90668"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""105620ae-3797-4d70-b157-ed1cfa97e025"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""09679c64-5f5d-458e-86ed-f463ed119e1b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PressedCurveModifier"",
                    ""type"": ""Button"",
                    ""id"": ""e1df1fe3-e0c3-4671-a48f-110f40410cfc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ReleasedCurveModifier"",
                    ""type"": ""Button"",
                    ""id"": ""54cb90fd-0221-4fac-869e-2018eb1a487b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StraightModifier"",
                    ""type"": ""Button"",
                    ""id"": ""35f47dfd-2bfe-40fd-975c-e71759745f6a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d0d0429e-b48b-40a4-b823-981ba8ce9b44"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dee415bb-22d6-4f94-a87f-200cf4beed33"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35f32f86-834f-4430-b5b3-bbef6621f75c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a42aaa3-e190-4444-8f1a-cf9a6e0f7e77"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""PressedCurveModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""195dc8a9-ee89-49af-814d-b2b1c2209b2f"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""ReleasedCurveModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df87f303-3086-4986-b2d7-3f41f99517d7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""StraightModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // RoadActions
        m_RoadActions = asset.FindActionMap("RoadActions", throwIfNotFound: true);
        m_RoadActions_LeftClick = m_RoadActions.FindAction("LeftClick", throwIfNotFound: true);
        m_RoadActions_RightClick = m_RoadActions.FindAction("RightClick", throwIfNotFound: true);
        m_RoadActions_Cancel = m_RoadActions.FindAction("Cancel", throwIfNotFound: true);
        m_RoadActions_PressedCurveModifier = m_RoadActions.FindAction("PressedCurveModifier", throwIfNotFound: true);
        m_RoadActions_ReleasedCurveModifier = m_RoadActions.FindAction("ReleasedCurveModifier", throwIfNotFound: true);
        m_RoadActions_StraightModifier = m_RoadActions.FindAction("StraightModifier", throwIfNotFound: true);
    }

    ~@RoadActionsClass()
    {
        UnityEngine.Debug.Assert(!m_RoadActions.enabled, "This will cause a leak and performance issues, RoadActionsClass.RoadActions.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RoadActions
    private readonly InputActionMap m_RoadActions;
    private List<IRoadActionsActions> m_RoadActionsActionsCallbackInterfaces = new List<IRoadActionsActions>();
    private readonly InputAction m_RoadActions_LeftClick;
    private readonly InputAction m_RoadActions_RightClick;
    private readonly InputAction m_RoadActions_Cancel;
    private readonly InputAction m_RoadActions_PressedCurveModifier;
    private readonly InputAction m_RoadActions_ReleasedCurveModifier;
    private readonly InputAction m_RoadActions_StraightModifier;
    /// <summary>
    /// Provides access to input actions defined in input action map "RoadActions".
    /// </summary>
    public struct RoadActionsActions
    {
        private @RoadActionsClass m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public RoadActionsActions(@RoadActionsClass wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "RoadActions/LeftClick".
        /// </summary>
        public InputAction @LeftClick => m_Wrapper.m_RoadActions_LeftClick;
        /// <summary>
        /// Provides access to the underlying input action "RoadActions/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_RoadActions_RightClick;
        /// <summary>
        /// Provides access to the underlying input action "RoadActions/Cancel".
        /// </summary>
        public InputAction @Cancel => m_Wrapper.m_RoadActions_Cancel;
        /// <summary>
        /// Provides access to the underlying input action "RoadActions/PressedCurveModifier".
        /// </summary>
        public InputAction @PressedCurveModifier => m_Wrapper.m_RoadActions_PressedCurveModifier;
        /// <summary>
        /// Provides access to the underlying input action "RoadActions/ReleasedCurveModifier".
        /// </summary>
        public InputAction @ReleasedCurveModifier => m_Wrapper.m_RoadActions_ReleasedCurveModifier;
        /// <summary>
        /// Provides access to the underlying input action "RoadActions/StraightModifier".
        /// </summary>
        public InputAction @StraightModifier => m_Wrapper.m_RoadActions_StraightModifier;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_RoadActions; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="RoadActionsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(RoadActionsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="RoadActionsActions" />
        public void AddCallbacks(IRoadActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_RoadActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RoadActionsActionsCallbackInterfaces.Add(instance);
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @PressedCurveModifier.started += instance.OnPressedCurveModifier;
            @PressedCurveModifier.performed += instance.OnPressedCurveModifier;
            @PressedCurveModifier.canceled += instance.OnPressedCurveModifier;
            @ReleasedCurveModifier.started += instance.OnReleasedCurveModifier;
            @ReleasedCurveModifier.performed += instance.OnReleasedCurveModifier;
            @ReleasedCurveModifier.canceled += instance.OnReleasedCurveModifier;
            @StraightModifier.started += instance.OnStraightModifier;
            @StraightModifier.performed += instance.OnStraightModifier;
            @StraightModifier.canceled += instance.OnStraightModifier;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="RoadActionsActions" />
        private void UnregisterCallbacks(IRoadActionsActions instance)
        {
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @PressedCurveModifier.started -= instance.OnPressedCurveModifier;
            @PressedCurveModifier.performed -= instance.OnPressedCurveModifier;
            @PressedCurveModifier.canceled -= instance.OnPressedCurveModifier;
            @ReleasedCurveModifier.started -= instance.OnReleasedCurveModifier;
            @ReleasedCurveModifier.performed -= instance.OnReleasedCurveModifier;
            @ReleasedCurveModifier.canceled -= instance.OnReleasedCurveModifier;
            @StraightModifier.started -= instance.OnStraightModifier;
            @StraightModifier.performed -= instance.OnStraightModifier;
            @StraightModifier.canceled -= instance.OnStraightModifier;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="RoadActionsActions.UnregisterCallbacks(IRoadActionsActions)" />.
        /// </summary>
        /// <seealso cref="RoadActionsActions.UnregisterCallbacks(IRoadActionsActions)" />
        public void RemoveCallbacks(IRoadActionsActions instance)
        {
            if (m_Wrapper.m_RoadActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="RoadActionsActions.AddCallbacks(IRoadActionsActions)" />
        /// <seealso cref="RoadActionsActions.RemoveCallbacks(IRoadActionsActions)" />
        /// <seealso cref="RoadActionsActions.UnregisterCallbacks(IRoadActionsActions)" />
        public void SetCallbacks(IRoadActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_RoadActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RoadActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="RoadActionsActions" /> instance referencing this action map.
    /// </summary>
    public RoadActionsActions @RoadActions => new RoadActionsActions(this);
    private int m_PCSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "RoadActions" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="RoadActionsActions.AddCallbacks(IRoadActionsActions)" />
    /// <seealso cref="RoadActionsActions.RemoveCallbacks(IRoadActionsActions)" />
    public interface IRoadActionsActions
    {
        /// <summary>
        /// Method invoked when associated input action "LeftClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PressedCurveModifier" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPressedCurveModifier(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ReleasedCurveModifier" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnReleasedCurveModifier(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "StraightModifier" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStraightModifier(InputAction.CallbackContext context);
    }
}
